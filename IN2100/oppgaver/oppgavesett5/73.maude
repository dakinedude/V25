fmod LPO is
    protecting BOOL .
    protecting NAT .
    
    sorts FuncSymbol VarSymbol .
    ops a ack b c d f g h s 0 + * - v w . . . : -> FuncSymbol [ctor] .
    ops x x1 x2 x3 x4 x5 y y1 y2 y3 y4 y5 . . . : -> VarSymbol [ctor].
    sorts Term TermList .
    subsorts FuncSymbol VarSymbol < Term < TermList .
    op _,_ : TermList TermList -> TermList [ctor assoc prec 120] .
    op _[_] : FuncSymbol TermList -> Term [ctor] .

    sorts Equation EquationSet .
    subsort Equation < EquationSet .
    op none : -> EquationSet [ctor] .
    op _ _ : EquationSet EquationSet -> EquationSet
    [ctor assoc comm id: none] .
    op eq_=_. : Term Term -> Equation [ctor] .

    op ack : Term -> Term .
    eq ack[0, x] = s[x] .
    eq ack[s[x], 0] = ack[x, s[0]] .
    eq ack[s[x], s[y]] = ack[x, ack[s[x], y]] .

    sort Precedence .
    subsort FuncSymbol < Precedence .
    op emptyPrecedence : -> Precedence [ctor] .
    op _>>_ : Precedence Precedence -> Precedence
        [ctor assoc id: emptyPrecedence] .

    *** op p : -> Precedence .
    *** eq p =  ack >> f >> g >> h .

    op index : FuncSymbol Precedence -> Nat .
    eq index(F, F >> P) = 1 .
    ceq index(F, G >> P) = index(F, P) + 1 if not F == G .

    op _>>_in_ : FuncSymbol FuncSymbol Precedence -> Bool .
    eq F >> G in P
      = if index(F, P) < index(G, P) then true else false fi .

    vars F G H : FuncSymbol .
    var P : Precedence .
    vars T U V W : Term .
    var TL UL : TermList .
    vars X Y Z : VarSymbol .
    var E : Equation .
    var ES : EquationSet .

    op lpoTerm : EquationSet Precedence -> Bool .
    eq lpoTerm(none, P) = true .
    eq lpoTerm((eq F[TL] = G[UL] .), P) = lpo(F[TL], G[UL], P) .
    eq lpoTerm(E ES, P) = lpoTerm(E, P) and lpoTerm(ES, P) .

    op lpo : Term Term Precedence -> Bool .
    ceq lpo(F[TL], G[UL], P) = lpo1(F[TL], G[UL], P) or lpo2(F[TL], G[UL], P)
      if not (F == G) .
    eq lpo(F[TL], F[UL], P) = lpo3(F[TL], F[UL], P) .
    eq lpo(X, T, P) = false .
    eq lpo(F[T], X, P) = lpo1(F[T], X, P) .
    eq lpo(T, F, P) = lpo1(T, F, P) .
    eq lpo(F, G, P) = F >> G in P .
    
    op lpo1 : Term Term Precedence -> Bool .
    eq lpo1(F, G, P) = F >> G in P .
    eq lpo1(F[T], U, P) = (T == U or lpo(T, U, P)) .
    eq lpo1(F[T, TL], U, P) = (T == U or lpo(T, U, P))
        or lpo1(F[TL], U, P) .

    op lpo2 : Term Term Precedence -> Bool .
    eq lpo2(F[TL], G[U], P)
      = (F >> G in P) and lpo(F[TL], U, P) .
    eq lpo2(F[TL], G[U, UL], P)
      = (F >> G in P) and lpo(F[TL], U, P) and lpo2(F[TL], G[UL], P) .

    op lpo3 : Term Term Precedence -> Bool .
    eq lpo3(F[T, TL], G[U, UL], P)
      = lex>(TL, UL, P) and help(F[TL], G[UL], P) .

    op help : Term Term Precedence -> Bool .
    eq help(T, G[U], P) = lpo(T, U, P) .
    eq help(T, G[U, UL], P) = lpo(T, U, P) and help(T, G[UL], P) .

    op lex> : TermList TermList Precedence -> Bool .
    eq lex>(T, U, P) = lpo(T, U, P) .
    ceq lex>(TL, UL, P) = true if lpo(first(TL), first(UL), P) .
    ceq lex>(TL, UL, P) = false if not lpo(first(TL), first(UL), P) and not first(TL) == first(UL) .
    ceq lex>(TL, UL, P) = lex>(rest(TL), rest(UL), P) if first (TL) == first(UL) .

    op rest : TermList -> TermList .
    eq rest((T, TL)) = TL .

    op first : TermList -> Term .
    eq first((T, TL)) = T .
    
endfm

red lpoTerm(eq f[a, b, a] = f[a, b, b] .
    eq f[a, a, b] = f[a, b, a] .
    eq f[b, b, f[a, b, a]] = f[a, b, a] ., f >> a >> b) .

red lpoTerm(eq f[a, b, a] = f[a, b, b] .
    eq f[a, a, b] = f[a, b, a] .
    eq f[b, b, f[a, b, a]] = f[a, b, a] ., f >> b >> a) .
