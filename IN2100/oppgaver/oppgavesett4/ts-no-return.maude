fmod SALESMAN-NO-RET is
    protecting NAT . protecting INT .
    sorts City Cities .
    subsort City < Cities .

    op none : -> Cities [ctor] .
    op _;_ : Cities Cities -> Cities [ctor assoc comm id: none] .
    ops PhnomPenh SiemReap Sisophon Battambang KompongSom : -> City [ctor] .

    op cities : -> Cities .
    eq cities = PhnomPenh ; SiemReap ; Sisophon ; Battambang ; KompongSom .

    op cost : City City -> NzNat [comm] .
    eq cost(PhnomPenh, SiemReap) = 2 .
    eq cost(PhnomPenh, Sisophon) = 9 .
    eq cost(SiemReap, Sisophon) = 3 .
    eq cost(SiemReap, KompongSom) = 3 .
    eq cost(Sisophon, KompongSom) = 7 .
    eq cost(PhnomPenh, KompongSom) = 4 .
    eq cost(PhnomPenh, Battambang) = 6 .
    eq cost(SiemReap, Battambang) = 1 .
    eq cost(Sisophon, Battambang) = 3 .
    eq cost(Battambang, KompongSom) = 9 .

    vars CUR POT NXT : City .
    var CS REM SKIP : Cities .
    var B : Int .
    var NZNAT : NzNat .

    op main : Cities Nat -> Bool .
    eq main(CUR ; POT ; CS, NZNAT) = ts(CUR, POT ; CS, none, NZNAT) or
        ts(POT, CS, POT, NZNAT) . *** checking all potential starting cities

    op ts : City Cities Cities Int -> Bool .
    eq ts(CUR, NXT, none, B) = cost(CUR, NXT) <= B .
    ceq ts(CUR, REM, SKIP, B) = false if B < 0 .
    eq ts(CUR, none, POT ; SKIP, B) = false .

    eq ts(CUR, NXT ; REM, SKIP, B)
      = ts(NXT, REM ; SKIP, none, B - cost(NXT, CUR)) *** take the union of REM and SKIP
        or ts(CUR, REM, NXT ; SKIP, B) . *** skip the potential candidate
endfm
