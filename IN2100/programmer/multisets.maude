fmod MSET-INT is
    protecting INT .

    sorts Mset NeMset . *** Multiset and non-empty multiset

    subsorts Int < NeMset < Mset .

    op none : -> Mset [ctor] .
    op __ : Mset Mset -> Mset [ctor assoc comm id: none] .
    op __ : NeMset NeMset -> NeMset [ctor assoc comm id: none] .

    var M N : Mset .
    vars I J : Int .

    op size : Mset -> Nat .
    eq size(none) = 0 .
    eq size(M I) = 1 + size(M) .

    op mult : Int Mset -> Nat .
    eq mult(I, none) = 0 .
    eq mult(I, M J) = if I == J then 1 + mult(I, M) else mult(I, M) fi .

    op delete : Int Mset -> Mset . *** Remove ONE occ.
    eq delete(I, none) = none .
    eq delete(I, M J) = if I == J then M else delete(I, M) J fi .
    

    op _in_ : Int Mset -> Bool .
    eq I in none = false .
    eq I in M J = if I == J then true else I in M fi .

    op max : NeMset -> Int .
    eq max(I) = I .
    eq max(M I J) = if I >= J then max(M I) else max(M J) fi .

    op _>mul_ : Mset Mset -> Bool .
    eq none >mul M I = false .
    eq M I >mul none = true .
    ceq M I >mul N J = true if max(M I) > max(N J) .
    ceq M I >mul N J = false if max(M I) < max(N J) .
    ceq M I >mul N J = delete(max(M I), M I) >mul delete(max(N J), N J) if max(M I) == max(N J) .
    
endfm
